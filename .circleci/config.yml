version: 2.1

parameters:
  env:
    type: enum
    default: stage
    enum:
      - stage
      - dev

executors:
  python-executor:
    docker:
      - image: cimg/python:3.11
    environment:
      ENV: << pipeline.parameters.env >>

jobs:
  integration-tests:
    executor: python-executor
    parameters:
      env:
        type: enum
        default: stage
        enum:
          - stage
          - dev
    steps:
      - checkout

      - run:
          name: Set up Python virtual environment and install dependencies
          command: |
            cd src/be
            python -m venv .venv
            . .venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
            pip install allure-pytest

      - run:
          name: Install Allure CLI
          command: |
            sudo apt-get update
            sudo apt-get install -y default-jre wget
            wget -O allure.tgz https://github.com/allure-framework/allure2/releases/download/2.34.0/allure-2.34.0.tgz
            tar -xzf allure.tgz
            sudo mv allure-2.34.0 /opt/allure
            sudo ln -s /opt/allure/bin/allure /usr/local/bin/allure

      - run:
          name: Run pytest with Allure reporting
          command: |
            cd src/be
            . .venv/bin/activate
            export ENV=<< parameters.env >>
            pytest tests/ --alluredir=allure-results || echo "Tests failed"
          when: always

      - run:
          name: Generate Allure report
          command: |
            cd src/be
            if [ ! -d "allure-results" ] || [ -z "$(ls -A allure-results)" ]; then
              echo "‚ùå No Allure results found. Skipping report generation."
              mkdir -p allure-report
              echo "<html><body>No results</body></html>" > allure-report/index.html
            else
              mkdir -p allure-report
              allure generate --single-file allure-results --clean -o allure-report
            fi
          when: always

      - store_artifacts:
          path: src/be/allure-report
          destination: allure-html-report
          when: always

      - run:
          name: Send MS Teams notification with report link
          command: |
            cd src/be

            ARTIFACT_URL="https://output.circle-artifacts.com/output/job/${CIRCLE_WORKFLOW_JOB_ID}/artifacts/0/allure-html-report/index.html"

            if [ ! -d "allure-results" ] || [ -z "$(ls -A allure-results)" ]; then
              MESSAGE="‚ùå BE Integration tests could NOT be executed on **<< parameters.env >>** env, please check the CircleCI for more information."
              curl -H 'Content-Type: application/json' -d "$(jq -n --arg text "$MESSAGE" '{text: $text}')" "$TEAMS_WEBHOOK_URL"
              exit 1
            fi

            if grep -q '"status": "failed"' allure-results/*.json; then
              MESSAGE="‚ùå BE Integrations tests completed with FAILURES on **<< parameters.env >>** env. üìä [View Allure Report](${ARTIFACT_URL})"
              STATUS_CODE=1
            else
              MESSAGE="‚úÖ BE Integrations tests PASSED on **<< parameters.env >>** env. üìä [View Allure Report](${ARTIFACT_URL})"
              STATUS_CODE=0
            fi

            curl -H 'Content-Type: application/json' -d "$(jq -n --arg text "$MESSAGE" '{text: $text}')" "$TEAMS_WEBHOOK_URL"

            exit $STATUS_CODE
          when: always

workflows:
  version: 2
  nightly-integration-tests:
    triggers:
      - schedule:
          cron: "58 6 * * *"
          filters:
            branches:
              only:
                - ci/ci-integrations
    jobs:
      - integration-tests:
          env: stage
          filters:
            branches:
              only:
                - ci/ci-integrations
